// PROGRAMMER: William H. Weiskopf
// USERID: WWEISKOP
// COURSE: CSCI-410
// TERM: FALL 2013
// This file is based on a file from www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;
        var int i;

        let address = (x/16) + (y*32);
        let mask = 1;
        let i = 0;
        while (i < (x & 15)) {
            let mask = mask + mask;
            let i = i + 1;
        }

        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int test;
        var int dx;
        var int dy;
        var int a;
        var int b;
        var int y_test;

        if(x1 > x2) {       // Sorting by x takes care of the -x case
            let test = x1;
            let x1 = x2;
            let x2 = test;
            let test = y1;  // Must keep pairs together
            let y1 = y2;
            let y2 = test;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        // Dealing with the -y case
        if (dy < 0) {
            let y_test = -1;
        } else {
            let y_test = 1;
        }

        let a = 0;
        let b = 0;
        let test = 0;

        while (~(a > dx) & (((y_test > 0) & ~(b > dy)) | ((y_test < 0) & ~(b < dy)))) {
            do Screen.drawPixel(x1+a,y1+b);
            if (dy = 0) {
                let a = a + 1;
            } else {
                if (test < 0) {
                    let a = a + 1;
                    let test = test + (dy*y_test);
                } else {
                    let b = b + y_test;
                    let test = test - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int height;
        var int chord;

        let height = -r;
        while (~(height > r)) {
            let chord = Math.sqrt((r*r) - (height*height));
            do Screen.drawLine(cx-chord, cy+height, cx+chord, cy+height);
            let height = height + 1;
        }
        return;
    }
}
