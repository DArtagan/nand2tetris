// PROGRAMMER: William H. Weiskopf
// USERID: WWEISKOP
// COURSE: CSCI-410
// TERM: FALL 2013
// This file is based on a file from www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=inst15Not);
	
	// D SIGNAL
	And(a=instruction[4], b=instruction[15], out=DRegLoad);
	DRegister(in=ALUout, load=DRegLoad, out=sigD);
	
	// A SIGNAL
	And(a=instruction[15], b=instruction[5], out=destAOut);
	Mux16(a=instruction, b=ALUout, sel=destAOut, out=regAIn);
	Or(a=inst15Not, b=destAOut, out=loadA);
	ARegister(in=regAIn, load=loadA, out=sigA);
	
	// ALU
	Mux16(a=sigA, b=inM, sel=instruction[12], out=sigAM);
	ALU(x=sigD, y=sigAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=ALUzr, ng=ALUng);

	// M SIGNAL / MEMORY
	Or16(a=false, b=sigA, out[0..14]=addressM);
	Or16(a=false, b=ALUout, out=outM);
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	// JUMP
	Or(a=ALUzr, b=ALUng, out=lessEqualZero);
	Not(in=lessEqualZero, out=greaterZero);
	And(a=ALUzr, b=instruction[1], out=JEQ);
	And(a=ALUng, b=instruction[2], out=JLT);
	And(a=greaterZero, b=instruction[0], out=JGT);
	Or(a=JEQ, b=JLT, out=JLE);
	Or(a=JLE, b=JGT, out=jumpToA);
	
	
	// PROGRAM COUNTER
	And(a=instruction[15], b=jumpToA, out=loadPC);
	Not(in=loadPC, out=incPC);
	PC(in=sigA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}